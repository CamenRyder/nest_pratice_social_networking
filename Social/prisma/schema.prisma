generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Dish {
  dish_id       Int             @id @default(autoincrement())
  post_id       Int?
  name          String?         @db.VarChar(250)
  price         Int?
  url_image     String?         @db.VarChar(250)
  Post          Post?           @relation(fields: [post_id], references: [post_id], map: "Dish_ibfk_2")
  InvoiceDetail InvoiceDetail[]

  @@index([post_id], map: "post_id")
}

model Follower {
  follow_id                             Int   @id @default(autoincrement())
  user_id                               Int?
  following_user_id                     Int?
  User_Follower_following_user_idToUser User? @relation("Follower_following_user_idToUser", fields: [following_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Follower_ibfk_1")
  User_Follower_user_idToUser           User? @relation("Follower_user_idToUser", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Follower_ibfk_4")

  @@index([following_user_id], map: "user_follow_er_id")
  @@index([user_id], map: "user_id")
}

model Invoice {
  invoice_id    Int             @id @default(autoincrement())
  user_id       Int?
  create_date   String?         @db.VarChar(200)
  total_price   Float?
  User          User?           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "Invoice_ibfk_3")
  InvoiceDetail InvoiceDetail[]

  @@index([user_id], map: "user_id")
}

model InvoiceDetail {
  invoice_detail_id Int      @id @default(autoincrement())
  dish_id           Int?
  invoice_id        Int?
  buy_price         Float?
  amount            Float?
  total             Float?
  Dish              Dish?    @relation(fields: [dish_id], references: [dish_id], onDelete: NoAction, onUpdate: NoAction, map: "InvoiceDetail_ibfk_1")
  Invoice           Invoice? @relation(fields: [invoice_id], references: [invoice_id], onDelete: NoAction, onUpdate: NoAction, map: "InvoiceDetail_ibfk_2")

  @@index([dish_id], map: "dish_id")
  @@index([invoice_id], map: "invoice_id")
}

model Issues {
  issue_id    Int      @id @default(autoincrement())
  issue_name  String?  @db.VarChar(200)
  description String?  @db.Text
  Report      Report[]
}

model Notification {
  noti_id                                Int                @id @default(autoincrement())
  date                                   String?            @db.VarChar(200)
  description                            String?            @db.VarChar(400)
  is_seen                                Int?               @default(0)
  user_id                                Int
  title                                  String?            @db.VarChar(200)
  Noti_type_id                           Int?
  post_id                                Int?
  user_action_id                         Int?
  User                                   User               @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "Notification_ibfk_1")
  Post                                   Post?              @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "Notification_ibfk_2")
  User_Notification_user_action_idToUser User?              @relation("Notification_user_action_idToUser", fields: [user_action_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Notification_ibfk_3")
  Notification_type                      Notification_type? @relation(fields: [Noti_type_id], references: [noti_type_id], onDelete: NoAction, onUpdate: NoAction, map: "Notification_ibfk_4")

  @@index([user_id], map: "user_id")
  @@index([Noti_type_id], map: "Noti_type_id")
  @@index([post_id], map: "post_id")
  @@index([user_action_id], map: "user_action_id")
}

model Post {
  post_id          Int            @id @default(autoincrement())
  user_id          Int?
  post_type_id     Int?
  post_top_id      Int?
  description      String?        @db.Text
  rating           Float?
  date_create_post String?        @db.VarChar(100)
  diner_address    String?        @db.VarChar(280)
  diner_name       String?        @db.VarChar(280)
  Dish             Dish[]
  Notification     Notification[]
  User             User?          @relation(fields: [user_id], references: [user_id], onUpdate: SetNull, map: "Post_ibfk_5")
  PostType         PostType?      @relation(fields: [post_type_id], references: [post_type_id], onUpdate: SetNull, map: "Post_ibfk_7")
  PostImage        PostImage[]
  Rating           Rating[]
  ReactPost        ReactPost[]
  Report           Report[]

  @@index([post_type_id], map: "post_type_id")
  @@index([user_id], map: "user_id")
}

model PostImage {
  post_image_id    Int     @id @default(autoincrement())
  url_image        String? @db.Text
  post_id          Int?
  post_image_state String? @db.VarChar(100)
  Post             Post?   @relation(fields: [post_id], references: [post_id], onUpdate: SetNull, map: "PostImage_ibfk_1")

  @@index([post_id], map: "post_id")
}

model PostType {
  post_type_id Int    @id @default(autoincrement())
  Name         String @db.VarChar(200)
  Post         Post[]
}

model Rating {
  rate_id Int   @id @default(autoincrement())
  user_id Int?
  post_id Int?
  rate    Int?
  User    User? @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Rating_ibfk_1")
  Post    Post? @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "Rating_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model ReactPost {
  react_post_id Int   @id @default(autoincrement())
  post_id       Int?
  user_id       Int?
  like_state    Int
  Post          Post? @relation(fields: [post_id], references: [post_id], onUpdate: NoAction, map: "ReactPost_ibfk_1")
  User          User? @relation(fields: [user_id], references: [user_id], onUpdate: NoAction, map: "ReactPost_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model Report {
  report_id    Int     @id @default(autoincrement())
  user_id      Int?
  post_id      Int?
  issue_id     Int?
  dateReported String  @db.VarChar(200)
  User         User?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "Report_ibfk_1")
  Post         Post?   @relation(fields: [post_id], references: [post_id], onDelete: NoAction, onUpdate: NoAction, map: "Report_ibfk_2")
  Issues       Issues? @relation(fields: [issue_id], references: [issue_id], onDelete: NoAction, onUpdate: NoAction, map: "Report_ibfk_3")

  @@index([issue_id], map: "issue_id")
  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model Role {
  role_id Int     @id @default(autoincrement())
  name    String? @db.VarChar(200)
  User    User[]
}

model User {
  user_id                                        Int               @id @default(autoincrement())
  email                                          String            @db.VarChar(400)
  hash_password                                  String?           @db.VarChar(400)
  fullname                                       String?           @db.VarChar(400)
  gender                                         Int?              @default(0)
  country                                        String?           @db.VarChar(400)
  language                                       String?           @db.VarChar(400)
  url_avatar                                     String?           @default("http://camenryder.xyz/public/img/avatar_default.png") @db.VarChar(400)
  role_id                                        Int?
  phone                                          String?           @db.VarChar(400)
  mode_level_id                                  Int?
  url_background_profile                         String?           @default("http://camenryder.xyz/public/img/background_profile_default.jpg") @db.VarChar(400)
  date_create_account                            String?           @db.VarChar(400)
  BrowsingAccount                                BrowsingAccount[]
  Follower_Follower_following_user_idToUser      Follower[]        @relation("Follower_following_user_idToUser")
  Follower_Follower_user_idToUser                Follower[]        @relation("Follower_user_idToUser")
  Invoice                                        Invoice[]
  Notification                                   Notification[]
  Notification_Notification_user_action_idToUser Notification[]    @relation("Notification_user_action_idToUser")
  Post                                           Post[]
  Rating                                         Rating[]
  ReactPost                                      ReactPost[]
  Report                                         Report[]
  Role                                           Role?             @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "User_ibfk_1")
  Moderator_level                                Moderator_level?  @relation(fields: [mode_level_id], references: [mode_level_id], onDelete: NoAction, onUpdate: NoAction, map: "User_ibfk_2")

  @@index([role_id], map: "role_id")
  @@index([mode_level_id], map: "mode_level_id")
}

model AccountState {
  account_state_id   Int               @id @default(autoincrement())
  account_state_name String            @db.VarChar(400)
  BrowsingAccount    BrowsingAccount[]
}

model BrowsingAccount {
  browsing_account_id Int           @id @default(autoincrement())
  user_id             Int?
  create_at           String?       @db.VarChar(400)
  moderator_accepted  Int?
  account_state_id    Int?
  User                User?         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "BrowsingAccount_ibfk_1")
  AccountState        AccountState? @relation(fields: [account_state_id], references: [account_state_id], onDelete: NoAction, onUpdate: NoAction, map: "BrowsingAccount_ibfk_3")

  @@index([user_id], map: "user_id")
  @@index([account_state_id], map: "account_state_id")
}

model Moderator_level {
  mode_level_id     Int    @id @default(autoincrement())
  name_mod_level    String @db.VarChar(400)
  description_level String @db.VarChar(400)
  User              User[]
}

model Notification_type {
  noti_type_id   Int            @id @default(autoincrement())
  noti_type_name String         @db.VarChar(200)
  Notification   Notification[]
}
